#!/usr/bin/env python3
"""
Script de inicializaci√≥n para producci√≥n
"""

import os
import sys
from datetime import datetime

def init_production():
    """Inicializar la aplicaci√≥n para producci√≥n."""
    
    print("üöÄ Inicializando Email Manager IA para producci√≥n...")
    print("=" * 60)
    
    # Verificar variables de entorno
    print("1Ô∏è‚É£ Verificando variables de entorno...")
    try:
        from check_env import check_environment
        if not check_environment():
            print("‚ùå Variables de entorno no configuradas correctamente")
            return False
    except Exception as e:
        print(f"‚ùå Error verificando entorno: {e}")
        return False
    
    # Inicializar aplicaci√≥n
    print("\n2Ô∏è‚É£ Inicializando aplicaci√≥n Flask...")
    try:
        from app import create_app, db
        app = create_app()
        print("‚úÖ Aplicaci√≥n Flask inicializada")
    except Exception as e:
        print(f"‚ùå Error inicializando Flask: {e}")
        return False
    
    # Inicializar base de datos
    print("\n3Ô∏è‚É£ Inicializando base de datos...")
    try:
        with app.app_context():
            # Crear todas las tablas
            db.create_all()
            print("‚úÖ Tablas de base de datos creadas")
            
            # Verificar tablas
            from sqlalchemy import inspect
            inspector = inspect(db.engine)
            tables = inspector.get_table_names()
            print(f"üìä Tablas disponibles: {', '.join(tables)}")
            
    except Exception as e:
        print(f"‚ùå Error inicializando base de datos: {e}")
        return False
    
    # Verificar servicios
    print("\n4Ô∏è‚É£ Verificando servicios externos...")
    
    # OpenAI
    try:
        from app.services.openai_service import OpenAIService
        openai_service = OpenAIService()
        status = openai_service.get_status()
        if status['status'] == 'ready':
            print("‚úÖ OpenAI: Conectado")
        else:
            print(f"‚ö†Ô∏è  OpenAI: {status['message']}")
    except Exception as e:
        print(f"‚ùå OpenAI: Error - {e}")
    
    # Microsoft Graph (solo verificar configuraci√≥n)
    try:
        from app.config import Config
        config = Config()
        if config.MICROSOFT_CLIENT_ID and config.MICROSOFT_CLIENT_SECRET:
            print("‚úÖ Microsoft Graph: Configurado")
        else:
            print("‚ö†Ô∏è  Microsoft Graph: Credenciales no configuradas")
    except Exception as e:
        print(f"‚ùå Microsoft Graph: Error - {e}")
    
    # Verificar endpoints
    print("\n5Ô∏è‚É£ Verificando endpoints...")
    try:
        with app.test_client() as client:
            # Health check
            response = client.get('/api/health')
            if response.status_code == 200:
                print("‚úÖ Health check: OK")
            else:
                print(f"‚ö†Ô∏è  Health check: {response.status_code}")
            
            # Debug endpoint
            response = client.get('/api/debug')
            if response.status_code == 200:
                print("‚úÖ Debug endpoint: OK")
            else:
                print(f"‚ö†Ô∏è  Debug endpoint: {response.status_code}")
                
    except Exception as e:
        print(f"‚ùå Error verificando endpoints: {e}")
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üéâ Inicializaci√≥n completada")
    print(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
    print("\nüìã Pr√≥ximos pasos:")
    print("1. Verifica que todas las variables de entorno est√©n configuradas en Render")
    print("2. Despliega el frontend en Vercel")
    print("3. Prueba la aplicaci√≥n completa")
    print("\nüîó URLs importantes:")
    print("- Health check: /api/health")
    print("- Debug info: /api/debug")
    print("- Database health: /api/health/db")
    
    return True

if __name__ == '__main__':
    success = init_production()
    if not success:
        sys.exit(1)
