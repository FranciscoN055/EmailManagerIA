#!/usr/bin/env python3
"""
Script para verificar el estado de los rate limits de OpenAI
"""

import requests
import json
import time
from datetime import datetime, timedelta

def check_openai_rate_limits():
    """Verifica el estado de los rate limits de OpenAI"""
    
    print("üîç Verificando estado de rate limits de OpenAI...")
    print("=" * 50)
    
    try:
        # Verificar si el servidor est√° funcionando
        response = requests.get("http://localhost:5000/api/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Servidor backend funcionando")
        else:
            print("‚ùå Servidor backend no responde")
            return
    except Exception as e:
        print(f"‚ùå Error conectando al servidor: {e}")
        return
    
    try:
        # Verificar rate limits espec√≠ficos
        response = requests.get("http://localhost:5000/api/emails/openai-rate-limit", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"üìä Estado de rate limits:")
            print(f"   - OpenAI configurado: {data.get('openai_configured', False)}")
            print(f"   - Modelo: {data.get('model', 'N/A')}")
            print(f"   - √öltimo error: {data.get('last_error', 'Ninguno')}")
            print(f"   - Timestamp: {data.get('timestamp', 'N/A')}")
            
            if data.get('last_error'):
                error = data.get('last_error', '')
                if 'rate_limit' in error.lower() or '429' in error:
                    print("‚ö†Ô∏è  RATE LIMIT ACTIVO - Esperando reset...")
                    
                    # Calcular tiempo de espera estimado
                    if '20s' in error:
                        print("   - RPM reset: ~20 segundos")
                    elif '5h' in error or '5h17m' in error:
                        print("   - TPM reset: ~5 horas y 17 minutos")
                        print("   - Hora estimada de reset:", (datetime.now() + timedelta(hours=5, minutes=17)).strftime("%H:%M:%S"))
                else:
                    print("   - Otro error de OpenAI")
            else:
                print("‚úÖ No hay rate limits activos")
        else:
            print(f"‚ùå Error verificando rate limits: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error verificando rate limits: {e}")
    
    print("\n" + "=" * 50)
    print("üí° Recomendaciones:")
    print("1. Si hay rate limit activo, espera el tiempo indicado")
    print("2. Considera actualizar tu plan de OpenAI para l√≠mites m√°s altos")
    print("3. Mientras tanto, la app usar√° clasificaci√≥n basada en reglas")
    print("4. Los l√≠mites se han configurado ultra conservadores para evitar rate limits")

if __name__ == "__main__":
    check_openai_rate_limits()
